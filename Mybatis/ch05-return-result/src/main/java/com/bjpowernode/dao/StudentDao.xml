<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bjpowernode.dao.StudentDao">
    <!-- parameterType：写在mapper文件中的一个属性，表示dao接口中方法的参数的数据类型
            parameterType他的值是Java的数据类型权限定名称或者是mybatis定义的别名
            列如：parameterType=“java.lang.Integer"
                 parameterType="int"
            注意：parameterType不是强制的，mybatis通过反射机制能够发现接口参数类型
                 所以可以没有，一般我们也不写
            返回一个简单的参数
    -->
<!--    resultType：表示结果类型，是SQL语句执行后得到ResulSet，遍历这个ResultSet得到Java对象的类型
                    值写的类型的全限定名称(写的是domain中类的全部名称)-->
   <select id="selectStudentById"  resultType="stu">
       select id,name,email,age from student where id=#{id};
   </select>

<!--    多个参数：命名参数，在形参=定义的面前加入@Param-->
    <!--自定义别名，resulType-->
    <select id="selectMulitParam" resultType="stu">
        select id,name,email,age from student where name=#{myname} or age=#{myage};
    </select>

    <!--第二种方法 自定义别名，用类名当返回值类型-->
    <select id="selectStudentReturnViewStudent" resultType="ViewStudent">
        select id,name from student where id=#{sid}
    </select>

<!--    别名返回类型int 全限定名称 java.lang.Integer-->
    <select id="countStudent" resultType="int">
        select count(*) from student;
    </select>

    <!--返回Map
         1）列名是map的key 列值是map的value
         2）最多只能返回一行
     -->
    <select id="selectMapById" resultType="java.util.HashMap">
        select id,name from student where id=#{stuid};
    </select>

    <!--使用resultMap
       1)先定义resultMap
       2）在select标签中，使用resultMap来引用1定义
    -->
    <resultMap id="studentMap" type="com.bjpowernode.domain.Student">
        <!--列名和Java属性的关系
          注解，使用id标签
          column:列名
          property：Java类型的属性关系
        -->
        <id column="id" property="id" />
        <result column="name" property="name"/>
        <result column="email" property="email"/>
        <result column="age" property="age"/>
    </resultMap>
    <select id="selectAllStudents" resultMap="studentMap">
        select id,name,email,age from student;
    </select>

    <!--列名和属性明不一样的 第一种方法-->
    <resultMap id="MyStudentMap" type="com.bjpowernode.domain.MyStudent">
        <!--列名和Java属性的关系
          注解，使用id标签
          column:列名
          property：Java类型的属性关系
        -->
        <id column="id" property="stuid" />
        <result column="name" property="stuname"/>
        <result column="email" property="stuemail"/>
        <result column="age" property="stuage"/>
    </resultMap>
<!--    <select id="selectStudents" resultType="com.bjpowernode.domain.MyStudent">-->
    <select id="selectStudents" resultMap="MyStudentMap">
        select id,name,email,age from student;
    </select>


    <!--列名不一样的第二种方法-->
    <!--resultType的默认原则 同名的列名赋值给同名的属性 使用列别名(Java对象的属性名)-->
    <select id="selectDiffColProperty" resultType="com.bjpowernode.domain.MyStudent">
        select id as stuid,name as stuname,email as stuemail,age as stuage from student;
    </select>


    <!--like Java代码指定like的内容第一种方法-->
    <select id="selectLikeOne" resultType="com.bjpowernode.domain.Student">
        select id,name,email,age from student where name like #{name};
    </select>

    <!--like Java代码指定like内容的第二种方法
      在mapper文件中拼接like的内容
    -->
   <select id="selectLikeTwo" resultType="com.bjpowernode.domain.Student">
       select id,name,email,age from student where name like "%"#{name}"%";
   </select>
</mapper>